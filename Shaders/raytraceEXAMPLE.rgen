//https://nvpro-samples.github.io/vk_raytracing_tutorial_KHR/#raytracingpipeline
#version 460
#extension GL_EXT_ray_tracing : require

struct HitPayload
{
  vec3 hitValue;
};

layout(location = 0) rayPayloadEXT HitPayload hitPayload;


layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0) uniform Camera{
    mat4 mat;
}camera; //inv
layout(binding = 3, set = 0) uniform Proj{
    mat4 mat;
}proj; //inv

void main() 
{
    const vec2 uv = (vec2(gl_LaunchIDEXT.xy) + vec2(0.5)) / gl_LaunchSizeEXT.xy;
    vec2 uvDir = uv*2.0 - 1.0;
    vec4 cameraOrigin = camera.mat*vec4(0,0,0,1);
    vec4 lensInter = proj.mat*vec4(uvDir.x,uvDir.y,1,1);
    vec4 rayDir = camera.mat*vec4(normalize(lensInter.xyz),0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tmin = 0.001;
    float tmax = 1000000.0;
    traceRayEXT(topLevelAS, rayFlags, 0xFF, 0,0,0,
        cameraOrigin.xyz,tmin,rayDir.xyz,tmax,0);

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitPayload.hitValue, 1.0));
}
